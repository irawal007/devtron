openapi: "3.0.0"
info:
  version: 1.0.0
  title: Devtron
servers:
  - url: http://petstore.swagger.io/api
paths:
  /user/v2:
    get:
      summary: Returns all users
      description: all the template users
      operationId: GetAllV2
      parameters:

        - name: searchKey
          in: query
          description: Search key for user listing
          required: false
          schema:
            type: string

        - name: sortOrder
          in: query
          description: Sorting order (ASC or DESC)
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC

        - name: sortBy
          in: query
          description: Sorting by email_id or last_login
          required: false
          schema:
            type: string
            enum:
              - email_id
              - last_login

        - name: offset
          in: query
          description: Offset for paginating the results
          required: false
          schema:
            type: integer

        - name: size
          in: query
          description: Size of the result set
          required: false
          schema:
            type: integer

        - name: showAll
          in: query
          description: Show all users (boolean)
          required: false
          schema:
            type: boolean

      responses:
        '200':
          description: list response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListingResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user:
    get:
      summary: Returns all users
      description: all the template users
      operationId: findAllUsers
      deprecated: true   # Marking the operation as deprecated
      responses:
        '200':
          description: list response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsers'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new User
      description: create user api, with multiple environment in one row of policy, plus chart group additional type of policy.
      operationId: addUser
      requestBody:
        description: json as request body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: create user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: update a user
      description: Updates a new user in the system
      operationId: updateUser
      requestBody:
        description: json as request body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/email:
    get:
      summary: search a user list by name
      description: search user detail by name
      operationId: findUserByEmail
      parameters:
        - name: email-id
          in: query
          description: ID of pet to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: list response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/{id}:
    get:
      summary: Returns user detail with role filter
      description: all the template group policies
      operationId: findUserById
      parameters:
        - name: id
          in: path
          description: ID of user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: user detail response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orchestrator/user/bulk:
    delete:
      summary: Delete multiple users in bulk
      description: Deletes user entities in bulk based on the provided criteria.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkDeleteRequest'
      responses:
        '200':
          description: Successfully deleted users
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request, invalid input
        '404':
          description: Users not found
        '500':
          description: Internal server error


components:
  schemas:
    User:
      type: object
      required:
        - email_id
      properties:
        id:
          type: integer
          description: Unique id of user
        email_id:
          type: string
          description: Unique valid email-id of user, comma separated emails ids for multiple users
        userRoleGroups:
          type: array
          items:
            $ref: '#/components/schemas/UserRoleGroupItem'
        roleFilters:
          type: array
          items:
            $ref: '#/components/schemas/roleFilter'
          description: role filters objects
    emptyRoleFilter: # This was below roleFilter, keeping its definition
      type: object
      required:
        - action
    UserListingResponse:
      type: object
      properties:
        users:
          items:
            $ref: '#/components/schemas/AllUsersV2'
          description: role filters objects
        totalCount:
          type: integer
          description: total number of results satisfying the conditions

    AllUsers:
      type: object
      required:
        - email_id
      properties:
        id:
          type: integer
          description: Unique id of user
        email_id:
          type: string
          description: Unique valid email-id of user, comma separated emails ids for multiple users
        groups:
          type: array
          items:
            type: string
        roleFilters:
          type: array
          items:
            $ref: '#/components/schemas/emptyRoleFilter'
          description: role filters objects
        lastLogin:
          type: string
          format: date-time
          description: user last login time
    AllUsersV2:
      type: object
      required:
        - email_id
      properties:
        id:
          type: integer
          description: Unique id of user
        email_id:
          type: string
          description: Unique valid email-id of user, comma separated emails ids for multiple users
        userRoleGroups:
          type: array
          items:
            $ref: '#/components/schemas/UserRoleGroupItem'
        lastLogin:
          type: string
          format: date-time
          description: user last login time

    # emptyRoleFilter was already defined above, removing this duplicate
    # emptyRoleFilter:
    #   type: object
    #   required:
    #     - action

    # roleFilter removed as it's defined in group_policy.yaml
    # BulkDeleteRequest removed as it's identical to group_policy.yaml's definition
    # ListingRequest removed as group_policy.yaml's version will be used, and this one is unreferenced or its references are via already removed schemas.
    UserRoleGroupItem:
      type: object
      properties:
        roleGroup:
          $ref: '#/components/schemas/UserPolicy_RoleGroupSummary'
    UserPolicy_RoleGroupSummary:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: The ID of the role group
        name:
          type: string
          description: The name of the role group
        description:
          type: string
          description: The description of the role group